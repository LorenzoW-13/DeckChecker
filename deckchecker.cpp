//main window's header
#include "deckchecker.h"

//Qt Headers
#include <QLayout>

//Model creation
QSqlTableModel* rowsDisplay(QObject* parent, QString filter) {
    QSqlTableModel* exmodel = new QSqlTableModel;

    exmodel->setTable("cards"); //Model is exclusive for the decklist table
    QString filterClause = "deck = '" + filter + "'"; //This model only shows the cards from 1 deck
    exmodel->setFilter(filterClause);

    //Changes on the table are reflected in the database
    exmodel->setEditStrategy(QSqlTableModel::OnFieldChange);
    exmodel->select();

    //Columns headers
    exmodel->setHeaderData(1, Qt::Horizontal, "Card");
    exmodel->setHeaderData(2, Qt::Horizontal, "Type");
    exmodel->setHeaderData(3, Qt::Horizontal, "");

    return exmodel;
}

DeckChecker::DeckChecker(QWidget* parent) : QMainWindow(parent) {
    //QtCreator-autogenerated ui object
    ui.setupUi(this);

    //Decks managers
    DeckNames = new QComboBox; //shows the list of deck names
    NewDeck = new QPushButton("New Deck"); //shows the popup to record new deck

    //Populate ComboBox
    DeckNames->setPlaceholderText("Choose Deck"); //Default text
    QSqlQuery query("SELECT name FROM Decks"); //Retrieve deck names
    while(query.next()) {
        DeckNames->addItem(query.value(0).toString()); //Names are written to ComboBox
    }
    
    //Assign reactivity
    connect(DeckNames, &QComboBox::activated, this, &DeckChecker::showSelected); //Populate decklist with selected deck
    connect(NewDeck, &QPushButton::clicked, this, &DeckChecker::loadDecks); //Launch popup to load new deck

    //Layout of the DeckManagers
    DecksManager = new QWidget;
    QHBoxLayout* ManagerLayout = new QHBoxLayout(DecksManager);

    //Fill Manager
    ManagerLayout->addWidget(DeckNames);
    ManagerLayout->addWidget(NewDeck);    

    //Declist widget
    Decklist = new QTableView;

    //Sorting buttons
    sortAlph = new QPushButton("Sort by Name");
    sortType = new QPushButton("Sort by Type");

    //Layout of sorting managers
    SortingManager = new QWidget;
    QHBoxLayout* SortingLayout = new QHBoxLayout(SortingManager);

    //Fill Sorter
    SortingLayout->addWidget(sortAlph);
    SortingLayout->addWidget(sortType);

    //Assign reactivity
    connect(sortAlph, &QPushButton::clicked, this, &DeckChecker::sAlpha); //sort the list by card name
    connect(sortType, &QPushButton::clicked, this, &DeckChecker::sType); //Sort the list by card type

    //Left side layout
    LeftSide = new QWidget;
    QVBoxLayout* LeftLayout = new QVBoxLayout(LeftSide);

    LeftLayout->addWidget(DecksManager);
    LeftLayout->addWidget(Decklist);
    LeftLayout->addWidget(SortingManager);

    //Searchbar for single card
    SearchBar = new QComboBox;

    SearchBar->setPlaceholderText("Type card name");

    //Assign reactivity
    connect(SearchBar, &QComboBox::activated, this, &DeckChecker::searchCards);

    //List of cards with given name
    CardsFound = new QTableView;

    //Right side layout
    RightSide = new QWidget;
    QVBoxLayout* RightLayout = new QVBoxLayout(RightSide);

    RightLayout->addWidget(SearchBar, 1, Qt::AlignHCenter);
    RightLayout->addWidget(CardsFound);

    //Application layout
    QWidget* Application = new QWidget;
    QHBoxLayout* ApplicationLayout = new QHBoxLayout(Application);

    ApplicationLayout->addWidget(LeftSide);
    ApplicationLayout->addWidget(RightSide);    

    setCentralWidget(Application);
}

DeckChecker::~DeckChecker() {}

void DeckChecker::databaseClose() {
    QApplication::quit();
}

void DeckChecker::resizeEvent(QResizeEvent* event) {
    //Mantiene il funzionamento standard per la finestra
    QMainWindow::resizeEvent(event);

    //Modifica il resize della tableview cardFound
    RightSide->setContentsMargins(0, -DecksManager->height(), 0, SortingManager->height() - 5); //I have no idea why these are the correct parameters, I found them by trial and error and it just works
    CardsFound->setFixedHeight(Decklist->geometry().height());

    int width = DeckNames->width();
    SearchBar->setFixedWidth(2*width + 5);
}

void DeckChecker::showEvent(QShowEvent* event) {
    //Mantiene il funzionamento standard per la finestra
    QMainWindow::showEvent(event);

    //Modifica lo show della tableview cardFound
    RightSide->setContentsMargins(0, -DecksManager->height(), 0, SortingManager->height() - 5); //See the corresponding line in the resizeEvent override
    CardsFound->setFixedHeight(Decklist->geometry().height());

    int width = DeckNames->width();
    SearchBar->setFixedWidth(2*width + 5);
    //SearchBar->setContentsMargins(RightSide->width() - width*2, 0, 0, 0);
}
